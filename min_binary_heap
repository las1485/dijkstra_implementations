import heapq
import time
import numpy as np


#lista de arquivos = [graphs.rtf,graphs_bay.rtf,graphs_col.rtf,graphs_flo,graphs_ne.rtf.rtf]


# Leitura do arquivo DIMACS e colocacao dele em um vetor
with open("graphs.rtf", "r") as f:
	data = f.read()

data = (data.splitlines())
co=0
ini = 1
nodes = []
graph={}
for line in data[1:]:
    line = line.split(' ')
    line[2] = int(line[2])
    if line[0] not in graph:
        graph[line[0]] = {line[1]:line[2]}
    else:
        graph[line[0]].update({line[1] : line[2]})



#funcao do dijkstra
def calculate_distances(graph, starting_vertex,target):
    path =[]
    parents = {}
    parents[starting_vertex] = "start"
    distances = {vertex: float('infinity') for vertex in graph}
    #print('distances',distances)
    #distances ={}
    #for vertex in graph:
        #distances[vertex] = {vertex:float('infinity')}

    distances[starting_vertex] = 0

    entry_lookup = {}
    pq = []

    for vertex, distance in distances.items():
        entry = [distance, vertex]
        entry_lookup[vertex] = entry
        heapq.heappush(pq, entry)


    while len(pq) > 0:
        current_distance, current_vertex = heapq.heappop(pq)

        for neighbor, neighbor_distance in graph[current_vertex].items():
            distance = distances[current_vertex] + neighbor_distance
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                entry_lookup[neighbor][0] = distance
                parents[neighbor] = current_vertex


    #path.append(target)
    #while path[0]!= starting_vertex:
        #path.insert(0, parents[path[0]])

    return distances,parents




#execucao do dijkstra com avaliacao dos tempos


times =[]

for i in range(1,10):
    start = time.time()

    g = (calculate_distances(graph, str(i),target='16'))
    end = time.time()

    times.append(round(end - start,4))

    print(i)
    print(end - start,'\n')

times = np.array(times)

avg_time = times.mean()

print(avg_time)
c = 0


